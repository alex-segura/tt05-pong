---
# Tiny Tapeout project information
project:
  wokwi_id:    0        # If using wokwi, set this to your project's ID

# If using an HDL, set wokwi_id as 0 and uncomment and list your source files here.
# Source files must be in ./src and you must list each source file separately
  source_files:
    - tt_um_pong.v
    - pong.v
    - hvsync_generator.v
    - debounce.v
    - encoder.v
    - paddle.v
  top_module:  "tt_um_pong"      # Put the name of your top module here, must start with "tt_um_". Make it unique by including your github username

# How many tiles your design occupies? A single tile is about 167x108 uM.
  tiles: "1x1"    # Valid values: 1x1, 1x2, 2x2, 3x2, 4x2 or 8x2

# Keep a track of the submission yaml
yaml_version: 4

# As everyone will have access to all designs, try to make it easy for someone new to your design to know what
# it does and how to operate it. This info will be automatically collected and used to make a datasheet for the chip.
#
# Here is a great example: https://github.com/davidsiaw/tt02-davidsiaw-stackcalc/blob/38c5647f83aad2aec675d566aa3d67b98f0aac81/info.yaml
documentation:
  author:       "Alex Segura"      # Your name
  title:        "Pong"             # Project title
  language:     "Verilog" # other examples include Verilog, Amaranth, VHDL, etc
  description:  "Two player pong game"      # Short description of what your project does

# Longer description of how the project works. You can use standard markdown format.
  how_it_works: |
    The hvsync generator generates both horizontal and vertical positions as well as hsync and vsync signals.
    The H and V positions are used to determine whether or not to draw a pixel on the screen.

    The ball and paddle positions are updated every VSYNC.


# Instructions on how someone could test your project, include things like what buttons do what and how to set the clock if needed
  how_to_test:  |
      Verilator simulation should display the game board with a ball, two paddles, and a dashed "net".

      W and S control the left paddle, up and down arrow keys control the right paddle. Collisions with the
      top and bottom boundaries should make the ball bounce. The ball should bounce off of both paddles.
      If the ball passes the side boundaries, the ball should be reset.

# A description of what the inputs do (e.g. red button, SPI CLK, SPI MOSI, etc).
  inputs:
    - compare bit 11
    - compare bit 12
    - compare bit 13
    - compare bit 14
    - compare bit 15
    - compare bit 16
    - compare bit 17
    - compare bit 18
# A description of what the outputs do (e.g. status LED, SPI MISO, etc)
  outputs:
    - segment a
    - segment b
    - segment c
    - segment d
    - segment e
    - segment f
    - segment g
    - dot
# A description of what the bidirectional I/O pins do (e.g. I2C SDA, I2C SCL, etc)
  bidirectional:
    - second counter bit 0
    - second counter bit 1
    - second counter bit 2
    - second counter bit 3
    - second counter bit 4
    - second counter bit 5
    - second counter bit 6
    - second counter bit 7

# The following fields are optional
  tag:          "game"      # comma separated list of tags: test, encryption, experiment, clock, animation, utility, industrial, pwm, fpga, alu, microprocessor, risc, riscv, sensor, signal generator, fft, filter, music, bcd, sound, serial, timer, random number generator, calculator, decoder, counter, puzzle, multiplier, game, oscillator,
  external_hw:  "rotary encoders, vga screen"      # Describe any external hardware needed
  discord:      "tridearm"      # Your discord handle, used for communication and automatically assigning tapeout role after a submission
  doc_link:     ""      # URL to longer form documentation, eg the README.md in your repository
  clock_hz:     25175000       # Clock frequency in Hz (if required)
  picture:      "screen.png"      # relative path to a picture in your repository (must be 512kb or less)
